# syntax=docker/dockerfile:1
###########################################
###########################################
## Dockerfile to run MegaLinter ##
###########################################
###########################################

# @not-generated

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARGTOP__START

#ARGTOP__END

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#FROM__START

#FROM__END

##################
# Build wheel for megalinter python package
##################
FROM ghcr.io/astral-sh/uv:0.5.22 AS uv
FROM python:3.12.8-alpine3.21 AS build-ml-core
WORKDIR /
COPY --from=uv /uv /uvx /bin/
# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project
# Copy the project into the image
COPY . .
# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen

##################
# Get base image #
##################
FROM python:3.12.8-alpine3.21

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARG__START
# renovate: datasource=repology depName=alpine_3_21/bash
ARG APK_BASH_VERSION=5.2.37-r0
# renovate: datasource=repology depName=alpine_3_21/ca-certificates
ARG APK_CA_CERTIFICATES_VERSION=20241121-r1
# renovate: datasource=repology depName=alpine_3_21/curl
ARG APK_CURL_VERSION=8.11.1-r0
# renovate: datasource=repology depName=alpine_3_21/gcc
ARG APK_GCC_VERSION=14.2.0-r4
# renovate: datasource=repology depName=alpine_3_21/git
ARG APK_GIT_VERSION=2.47.2-r0
# renovate: datasource=repology depName=alpine_3_21/git-lfs
ARG APK_GIT_LFS_VERSION=3.6.0-r1
# renovate: datasource=repology depName=alpine_3_21/libffi-dev
ARG APK_LIBFFI_DEV_VERSION=3.4.6-r0
# renovate: datasource=repology depName=alpine_3_21/make
ARG APK_MAKE_VERSION=4.4.1-r2
# renovate: datasource=repology depName=alpine_3_21/musl-dev
ARG APK_MUSL_DEV_VERSION=1.2.5-r8
# renovate: datasource=repology depName=alpine_3_21/openssh
ARG APK_OPENSSH_VERSION=9.9_p1-r2
# renovate: datasource=repology depName=alpine_3_21/gnupg
ARG APK_GNUPG_VERSION=2.4.7-r0
# renovate: datasource=repology depName=alpine_3_21/php84
ARG APK_PHP84_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-phar
ARG APK_PHP84_PHAR_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-mbstring
ARG APK_PHP84_MBSTRING_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-xmlwriter
ARG APK_PHP84_XMLWRITER_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-tokenizer
ARG APK_PHP84_TOKENIZER_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-ctype
ARG APK_PHP84_CTYPE_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-curl
ARG APK_PHP84_CURL_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-dom
ARG APK_PHP84_DOM_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-opcache
ARG APK_PHP84_OPCACHE_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-openssl
ARG APK_PHP84_OPENSSL_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-common
ARG APK_PHP84_COMMON_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/php84-simplexml
ARG APK_PHP84_SIMPLEXML_VERSION=8.4.3-r0
# renovate: datasource=repology depName=alpine_3_21/dpkg
ARG APK_DPKG_VERSION=1.22.11-r0
#ARG__END

####################
# Run APK installs #
####################

WORKDIR /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#APK__START
RUN apk add --no-cache \
                bash=${APK_BASH_VERSION} \
                ca-certificates=${APK_CA_CERTIFICATES_VERSION} \
                curl=${APK_CURL_VERSION} \
                gcc=${APK_GCC_VERSION} \
                git=${APK_GIT_VERSION} \
                git-lfs=${APK_GIT_LFS_VERSION} \
                libffi-dev=${APK_LIBFFI_DEV_VERSION} \
                make=${APK_MAKE_VERSION} \
                musl-dev=${APK_MUSL_DEV_VERSION} \
                openssh=${APK_OPENSSH_VERSION} \
                gnupg=${APK_GNUPG_VERSION} \
                php84=${APK_PHP84_VERSION} \
                php84-phar=${APK_PHP84_PHAR_VERSION} \
                php84-mbstring=${APK_PHP84_MBSTRING_VERSION} \
                php84-xmlwriter=${APK_PHP84_XMLWRITER_VERSION} \
                php84-tokenizer=${APK_PHP84_TOKENIZER_VERSION} \
                php84-ctype=${APK_PHP84_CTYPE_VERSION} \
                php84-curl=${APK_PHP84_CURL_VERSION} \
                php84-dom=${APK_PHP84_DOM_VERSION} \
                php84-opcache=${APK_PHP84_OPCACHE_VERSION} \
                php84-openssl=${APK_PHP84_OPENSSL_VERSION} \
                php84-common=${APK_PHP84_COMMON_VERSION} \
                php84-simplexml=${APK_PHP84_SIMPLEXML_VERSION} \
                dpkg=${APK_DPKG_VERSION} \
    && git config --global core.autocrlf true
#APK__END

# PATH for golang & python
ENV GOROOT=/usr/lib/go \
    GOPATH=/go
    # PYTHONPYCACHEPREFIX="$HOME/.cache/cpython/" NV: not working for all packages :/
# hadolint ignore=DL3044
ENV PATH="$PATH":"$GOROOT"/bin:"$GOPATH"/bin
RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \
    # Ignore npm package issues
    yarn config set ignore-engines true || true

##############################
# Installs rust dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#CARGO__START

#CARGO__END

################################
# Installs python dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV__START

#PIPVENV__END

############################
# Install NPM dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

ENV NODE_OPTIONS="--max-old-space-size=8192" \
    NODE_ENV=production
#NPM__START

#NPM__END

# Add node packages to path #
ENV PATH="/node-deps/node_modules/.bin:${PATH}" \
    NODE_PATH="/node-deps/node_modules"

##############################
# Installs ruby dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#GEM__START

#GEM__END

##############################
# COPY instructions #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#COPY__START
COPY --from=composer/composer:2-bin /composer /usr/bin/composer
#COPY__END

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#OTHER__START
# PHP installation
RUN update-alternatives --install /usr/bin/php php /usr/bin/php84 110
# Managed with COPY --from=composer/composer:2-bin /composer /usr/bin/composer
ENV PATH="/root/.composer/vendor/bin:${PATH}"
ENV PHP_CS_FIXER_IGNORE_ENV=true
#
# phpstan installation
RUN --mount=type=secret,id=GITHUB_TOKEN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && composer config --global allow-plugins.phpstan/extension-installer true && composer global require phpstan/phpstan phpstan/extension-installer bartlett/sarif-php-converters
#
#OTHER__END

################################
# Installs python dependencies #
################################
COPY --from=build-ml-core pyproject.toml README.md ./
COPY --from=build-ml-core megalinter /megalinter/
RUN --mount=type=cache,target=/root/.cache/uv,from=build-ml-core \
    --mount=from=uv,source=/uv,target=/bin/uv \
    uv pip install --system -e .

#######################################
# Copy scripts and rules to container #
#######################################
COPY megalinter/descriptors /megalinter-descriptors
COPY TEMPLATES /action/lib/.automation

# Copy server scripts
COPY server /server

###########################
# Get the build arguments #
###########################
ARG BUILD_DATE
ARG BUILD_REVISION
ARG BUILD_VERSION

#################################################
# Set ENV values used for debugging the version #
#################################################
ENV BUILD_DATE=$BUILD_DATE \
    BUILD_REVISION=$BUILD_REVISION \
    BUILD_VERSION=$BUILD_VERSION

#FLAVOR__START
ENV MEGALINTER_FLAVOR=none
#FLAVOR__END

#########################################
# Label the instance and set maintainer #
#########################################
LABEL com.github.actions.name="MegaLinter" \
      com.github.actions.description="The ultimate linters aggregator to make sure your projects are clean" \
      com.github.actions.icon="code" \
      com.github.actions.color="red" \
      maintainer="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$BUILD_REVISION \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.authors="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.url="https://megalinter.io" \
      org.opencontainers.image.source="https://github.com/oxsecurity/megalinter" \
      org.opencontainers.image.documentation="https://megalinter.io" \
      org.opencontainers.image.vendor="Nicolas Vuillamy" \
      org.opencontainers.image.description="Lint your code base with GitHub Actions"

#EXTRA_DOCKERFILE_LINES__START
ENV ENABLE_LINTERS=PHP_PHPSTAN \
    FLAVOR_SUGGESTIONS=false \
    SINGLE_LINTER=PHP_PHPSTAN \
    PRINT_ALPACA=false \
    LOG_FILE=none \
    SARIF_REPORTER=true \
    TEXT_REPORTER=false \
    UPDATED_SOURCES_REPORTER=false \
    GITHUB_STATUS_REPORTER=false \
    GITHUB_COMMENT_REPORTER=false \
    EMAIL_REPORTER=false \
    API_REPORTER=false \
    FILEIO_REPORTER=false \
    CONFIG_REPORTER=false \
    SARIF_TO_HUMAN=false
RUN mkdir /root/docker_ssh && mkdir /usr/bin/megalinter-sh
EXPOSE 22
COPY entrypoint.sh /entrypoint.sh
COPY sh /usr/bin/megalinter-sh
COPY sh/megalinter_exec /usr/bin/megalinter_exec
COPY sh/motd /etc/motd
RUN find /usr/bin/megalinter-sh/ -type f -iname "*.sh" -exec chmod +x {} \; && \
    chmod +x entrypoint.sh && \
    chmod +x /usr/bin/megalinter_exec && \
    echo "alias megalinter='python -m megalinter.run'" >> ~/.bashrc && source ~/.bashrc && \
    echo "alias megalinter_exec='/usr/bin/megalinter_exec'" >> ~/.bashrc && source ~/.bashrc
RUN export STANDALONE_LINTER_VERSION="$(python -m megalinter.run --input /tmp --linterversion)" && \
    echo $STANDALONE_LINTER_VERSION
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
#EXTRA_DOCKERFILE_LINES__END
